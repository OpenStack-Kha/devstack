# compute service
NOVA_REPO=https://github.com/OpenStack-Kha/nova.git
NOVA_BRANCH=stable-essex3

# storage service
SWIFT_REPO=https://github.com/OpenStack-Kha/swift.git
SWIFT_BRANCH=stable-essex3

# swift and keystone integration
SWIFT_KEYSTONE_REPO=https://github.com/OpenStack-Kha/swift-keystone2.git
SWIFT_KEYSTONE_BRANCH=stable-essex3

# image catalog service
GLANCE_REPO=https://github.com/OpenStack-Kha/glance.git
GLANCE_BRANCH=stable-essex3

# unified auth system (manages accounts/tokens)
KEYSTONE_REPO=https://github.com/OpenStack-Kha/keystone.git
KEYSTONE_BRANCH=stable-essex3

# a websockets/html5 or flash powered VNC console for vm instances
NOVNC_REPO=https://github.com/OpenStack-Kha/noVNC.git
NOVNC_BRANCH=stable-essex3

# django powered web control panel for openstack
HORIZON_REPO=https://github.com/OpenStack-Kha/horizon.git
HORIZON_BRANCH=stable-essex3

# python client library to nova that horizon (and others) use
NOVACLIENT_REPO=https://github.com/OpenStack-Kha/python-novaclient.git
NOVACLIENT_BRANCH=stable-essex3

# python keystone client library to nova that horizon uses
KEYSTONECLIENT_REPO=https://github.com/OpenStack-Kha/python-keystoneclient.git
KEYSTONECLIENT_BRANCH=stable-essex3

# quantum service
QUANTUM_REPO=https://github.com/OpenStack-Kha/quantum.git
QUANTUM_BRANCH=stable-essex3

# quantum client
QUANTUM_CLIENT_REPO=https://github.com/OpenStack-Kha/python-quantumclient.git
QUANTUM_CLIENT_BRANCH=stable-essex3

# Tempest test suite
TEMPEST_REPO=https://github.com/OpenStack-Kha/tempest.git
TEMPEST_BRANCH=stable-essex3

# melange service
MELANGE_REPO=https://github.com/OpenStack-Kha/melange.git
MELANGE_BRANCH=stable-essex3

# python melange client library
MELANGECLIENT_REPO=https://github.com/OpenStack-Kha/python-melangeclient.git
MELANGECLIENT_BRANCH=stable-essex3

# Specify a comma-separated list of uec images to download and install into glance.
# supported urls here are:
#  * "uec-style" images:
#     If the file ends in .tar.gz, uncompress the tarball and and select the first
#     .img file inside it as the image.  If present, use "*-vmlinuz*" as the kernel
#     and "*-initrd*" as the ramdisk
#     example: http://cloud-images.ubuntu.com/releases/oneiric/release/ubuntu-11.10-server-cloudimg-amd64.tar.gz
#  * disk image (*.img,*.img.gz)
#    if file ends in .img, then it will be uploaded and registered as a to
#    glance as a disk image.  If it ends in .gz, it is uncompressed first.
#    example:
#      http://cloud-images.ubuntu.com/releases/oneiric/release/ubuntu-11.10-server-cloudimg-armel-disk1.img
#      http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-rootfs.img.gz
#IMAGE_URLS="http://smoser.brickies.net/ubuntu/ttylinux-uec/ttylinux-uec-amd64-11.2_2.6.35-15_1.tar.gz" # old ttylinux-uec image
#IMAGE_URLS="http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img" # cirros full disk image
case "$LIBVIRT_TYPE" in
    lxc) # the cirros root disk in the uec tarball is empty, so it will not work for lxc
        IMAGE_URLS="http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-rootfs.img.gz";;
    *)  # otherwise, use the uec style image (with kernel, ramdisk, disk)
        IMAGE_URLS="http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz";;
esac

# allow local overrides of env variables
if [ -f ./localrc ]; then
    source ./localrc
fi
